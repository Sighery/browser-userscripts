// ==UserScript==
// @name         Deutsche Welle Langsam Gesprochene Nachrichten Fixes
// @namespace    Sighery
// @version      0.1
// @description  Improve the experience in the DW LGN pages for learning German
// @author       Sighery
// @match        https://learngerman.dw.com/de/*langsam-gesprochene-nachrichten/*
// @grant        none
// @icon         https://www.google.com/s2/favicons?sz=64&domain=dw.com
// ==/UserScript==

const timer = ms => new Promise(res => setTimeout(res, ms));

(async function () {
    'use strict';

    // Page has a lot of extra junk we don't want to traverse into
    // Additionally, also uses autogenerated references
    // Second section is the extras section with links. Not needed
    let article = document.querySelector(
        "#root > [aria-label='Page Container'] > div[data-content-id] > section:nth-child(1) article"
    );

    let content = article.querySelector("div.content-area > div > span");

    let media = article.querySelector("section.media");
    await fixMedia(media);
})();


function getHeaderHeight() {
    return document.querySelector("#root > [aria-label='Page Container'] nav").clientHeight;
}


function extractTextBlocks(content) {
    // The text blocks are layed out in a list of <h2> and <p>, all next to each other.
    // To tell when a block ends, we'll just stop at the next <h2>
    let textBlocks = [];

    const emptyBlock = () => { return { title: "", content: [] } };
    let currentBlock = emptyBlock();

    for (let block of content.children) {
        // Text blocks
        if (block.tagName === "P") {
            currentBlock.content.push(block.textContent.trimEnd());
            continue;
        }

        // Title blocks
        if (block.tagName === "H2") {
            // If title is already set, means this is a new block
            // Need to push the previous block and reset before continuing
            if (currentBlock.title !== "") {
                textBlocks.push(currentBlock);
                currentBlock = emptyBlock();
            }

            currentBlock.title = block.textContent.trimEnd();
        }
    }

    // Final push to collect the last block
    textBlocks.push(currentBlock);

    return textBlocks;
}


function generateDeeplLink(textBlock) {
    let title = textBlock.title;
    let contents = textBlock.content.join("\n\n");
    let uri = `https://www.deepl.com/en/translator#de/en-gb/${title}\n\n${contents}`;
    return encodeURI(uri);
}


async function fixMedia(media) {
    // First let's make it so clicking the image will pause/play the audio
    let audio = media.querySelector("audio");

    // There's some JS that runs and creates this element, so wait until it exists
    const getDisplay = () => media.querySelector(".vjs-text-track-display");
    let display = getDisplay();
    while (display === null) {
        await timer(50);
        display = getDisplay();
    }

    // Important, otherwise clicks will fall through
    display.style.pointerEvents = "auto";

    const toggle = () => {
        audio.paused ? audio.play() : audio.pause();
    }

    display.addEventListener("click", toggle);

    // Also, float the control bar at the bottom of the screen so it always follows
    let controlBar = media.querySelector(".vjs-control-bar");

    const setFloating = (node) => {
        node.style.position = "fixed";
        node.style.bottom = "0";
        node.style.left = "0";
        node.style.right = "0";
    }

    setFloating(controlBar);
}
